import streamlit as st
import requests

st.title('üå¶Ô∏è METAR Decoder with API')
st.markdown("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ METAR –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
metar_code = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ METAR –∫–æ–¥:", 
    "UUEE 141830Z 13003MPS 100V160 9999 SCT037 08/04 Q1012 R88/010070 NOSIG",
    height=100
)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
col1, col2 = st.columns([1, 3])
with col1:
    decode_button = st.button('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å METAR')
with col2:
    output_format = st.selectbox("–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", ["–¢–µ–∫—Å—Ç", "JSON"])

if decode_button and metar_code:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    api_url = "https://avwx.rest/api/metar"
    headers = {
        "Authorization": "AL2owhedvyAnChsCApVcZ-OpF_H0JSQ7FfC5ia5ILPU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
    }
    
    params = {
        "options": "translate,summary,speech",
        "airport": True,
        "reporting": True,
        "format": "json"
    }
    
    try:
        response = requests.get(
            f"{api_url}{metar_code.strip()}",
            headers=headers,
            params=params
        )
        
        if response.status_code == 200:
            data = response.json()
            
            if output_format == "JSON":
                st.json(data)
            else:
                # –ö—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
                st.success("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ")
                
                st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                cols = st.columns(2)
                cols[0].metric("–ê—ç—Ä–æ–ø–æ—Ä—Ç", data.get("station", "N/A"))
                cols[1].metric("–í—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è", data.get("time", {}).get("repr", "N/A"))
                
                if "wind" in data:
                    st.subheader("–í–µ—Ç–µ—Ä")
                    st.write(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['wind']['direction']['repr']}¬∞")
                    st.write(f"–°–∫–æ—Ä–æ—Å—Ç—å: {data['wind']['speed']['repr']} {data['wind']['speed']['unit']}")
                    if 'gust' in data['wind']:
                        st.write(f"–ü–æ—Ä—ã–≤—ã: {data['wind']['gust']['repr']} {data['wind']['gust']['unit']}")
                
                if "visibility" in data:
                    st.subheader("–í–∏–¥–∏–º–æ—Å—Ç—å")
                    st.write(f"{data['visibility']['repr']} {data['visibility']['unit']}")
                
                if "temperature" in data:
                    st.subheader("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
                    cols = st.columns(2)
                    cols[0].metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{data['temperature']['repr']}¬∞C")
                    cols[1].metric("–¢–æ—á–∫–∞ —Ä–æ—Å—ã", f"{data['dewpoint']['repr']}¬∞C")
                
                if "altimeter" in data:
                    st.subheader("–î–∞–≤–ª–µ–Ω–∏–µ")
                    st.write(f"{data['altimeter']['repr']} {data['altimeter']['unit']}")
                
                if "clouds" in data:
                    st.subheader("–û–±–ª–∞—á–Ω–æ—Å—Ç—å")
                    for cloud in data['clouds']:
                        st.write(f"- {cloud['repr']}")
                
                if "remarks" in data:
                    st.subheader("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
                    st.write(data['remarks'])
            
        elif response.status_code == 400:
            error_data = response.json()
            st.error(f"–û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–µ—Ç–∞–ª–∏: {error_data.get('message', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å METAR –∫–æ–¥–∞')}")
        elif response.status_code == 401:
            st.error("–û—à–∏–±–∫–∞ 401: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}. {response.text}")
    
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    except ValueError as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
else:
    st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ METAR –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
with st.expander("–ü—Ä–∏–º–µ—Ä—ã METAR –¥–ª—è —Ç–µ—Å—Ç–∞"):
    examples = {
        "–ú–æ—Å–∫–≤–∞ –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ (UUEE)": "UUEE 141830Z 13003MPS 100V160 9999 SCT037 08/04 Q1012 R88/010070 NOSIG",
        "–ù—å—é-–ô–æ—Ä–∫ (KJFK)": "KJFK 141851Z 16008KT 10SM FEW250 23/18 A3005",
        "–õ–æ–Ω–¥–æ–Ω –•–∏—Ç—Ä–æ—É (EGLL)": "EGLL 141920Z 24015KT 9999 FEW035 BKN048 16/12 Q1018"
    }
    
    selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä", list(examples.keys()))
    st.code(examples[selected])