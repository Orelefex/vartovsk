import streamlit as st
import requests
import polars as pl
from datetime import datetime
import re

st.title('‚úàÔ∏è –ê–≤–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

# –°—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.markdown("""
<style>
    .block-container {
        max-width: 100%;
        padding-left: 2rem;
        padding-right: 2rem;
    }
    .metar-box {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 1rem;
    }
    .taf-box {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 1rem;
    }
    .weather-icon {
        font-size: 1.2rem;
        margin-right: 0.5rem;
    }
    .section-title {
        color: #1e3a8a;
        margin-bottom: 0.5rem;
    }
    .airport-card {
        border-left: 4px solid #1e3a8a;
        padding-left: 1rem;
        margin-bottom: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API –∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=3600)
def get_metar_taf(icao):
    try:
        response = requests.get(f"https://metartaf.ru/{icao}.json", timeout=10)
        response.raise_for_status()
        
        if 'application/json' in response.headers.get('content-type', ''):
            data = response.json()
            return data.get('metar', 'N/A'), data.get('taf', 'N/A')
        return 'N/A', 'N/A'
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {icao}: {str(e)}")
        return 'N/A', 'N/A'

@st.cache_data
def load_airport_data():
    try:
        df = pl.read_excel("ICAO.xls")
        required_columns = {"icao_code", "name_rus", "name_eng", "city_rus", "city_eng", "country_rus"}
        
        if not required_columns.issubset(df.columns):
            st.error(f"–§–∞–π–ª ICAO.xls –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: {required_columns}")
            return None
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ICAO.xls: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ METAR/TAF
def decode_metar(metar):
    if metar == 'N/A':
        return "–î–∞–Ω–Ω—ã–µ METAR –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    decoded = []
    parts = metar.split()
    
    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    DIRECTIONS = {
        'N': '—Å–µ–≤–µ—Ä–Ω—ã–π', 'NE': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', 'E': '–≤–æ—Å—Ç–æ—á–Ω—ã–π',
        'SE': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', 'S': '—é–∂–Ω—ã–π', 'SW': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
        'W': '–∑–∞–ø–∞–¥–Ω—ã–π', 'NW': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
    }
    
    CLOUD_TYPES = {
        'FEW': '–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è (1-2/8 –Ω–µ–±–∞)',
        'SCT': '—Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã–µ (3-4/8 –Ω–µ–±–∞)',
        'BKN': '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è (5-7/8 –Ω–µ–±–∞)',
        'OVC': '—Å–ø–ª–æ—à–Ω–∞—è (8/8 –Ω–µ–±–∞)'
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ METAR
    for part in parts:
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        if re.match(r'^\d{6}Z$', part):
            time_str = f"{part[2:4]}:{part[4:6]} UTC {part[:2]} —á–∏—Å–ª–∞"
            decoded.append(f"üïí –í—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {time_str}")
        
        # –í–µ—Ç–µ—Ä
        elif re.match(r'^(\d{3})(\d{2,3})(G\d{2,3})?(KT|MPS|KMH)$', part):
            match = re.match(r'^(\d{3})(\d{2,3})(G\d{2,3})?(KT|MPS|KMH)?$', part)
            wind_dir = int(match.group(1))
            wind_speed = match.group(2)
            gust = match.group(3)[1:] if match.group(3) else None
            unit = '–º/—Å' if match.group(4) == 'MPS' else '—É–∑–ª–æ–≤'
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            dir_deg = (wind_dir + 22) // 45 * 45 % 360
            compass = {
                0: '—Å–µ–≤–µ—Ä–Ω—ã–π', 45: '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', 90: '–≤–æ—Å—Ç–æ—á–Ω—ã–π',
                135: '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', 180: '—é–∂–Ω—ã–π', 225: '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
                270: '–∑–∞–ø–∞–¥–Ω—ã–π', 315: '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
            }.get(dir_deg, '')
            
            wind_str = f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_dir}¬∞ ({compass}) {wind_speed} {unit}"
            if gust:
                wind_str += f", –ø–æ—Ä—ã–≤—ã –¥–æ {gust} {unit}"
            decoded.append(wind_str)
        
        # –í–∏–¥–∏–º–æ—Å—Ç—å
        elif re.match(r'^\d{4}$', part):
            vis = int(part)
            if vis >= 10000:
                decoded.append("üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: 10+ –∫–º")
            else:
                decoded.append(f"üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: {vis//1000 if vis%1000==0 else vis/1000:.1f} –∫–º")
        elif part == 'CAVOK':
            decoded.append("üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: 10+ –∫–º, –±–µ–∑ –æ—Å–∞–¥–∫–æ–≤ –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏")
        
        # –û–±–ª–∞—á–Ω–æ—Å—Ç—å
        elif re.match(r'^(FEW|SCT|BKN|OVC)\d{3}(CB|TCU)?$', part):
            cloud_type = CLOUD_TYPES.get(part[:3], part[:3])
            height = int(part[3:6]) * 30
            cloud_str = f"   - {cloud_type} –Ω–∞ {height} –º–µ—Ç—Ä–∞—Ö"
            if 'CB' in part:
                cloud_str += " (–∫—É—á–µ–≤–æ-–¥–æ–∂–¥–µ–≤—ã–µ)"
            elif 'TCU' in part:
                cloud_str += " (–±–∞—à–Ω–µ–æ–±—Ä–∞–∑–Ω—ã–µ)"
            
            if not any('‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å:' in s for s in decoded):
                decoded.append("‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å:")
            decoded.append(cloud_str)
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Ç–æ—á–∫–∞ —Ä–æ—Å—ã
        elif re.match(r'^(M?\d{2})/(M?\d{2})$', part):
            temp, dew = part.split('/')
            temp = temp.replace('M', '-')
            dew = dew.replace('M', '-')
            decoded.append(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, —Ç–æ—á–∫–∞ —Ä–æ—Å—ã: {dew}¬∞C")
        
        # –î–∞–≤–ª–µ–Ω–∏–µ
        elif re.match(r'^Q\d{4}$', part):
            pressure = part[1:]
            decoded.append(f"‚è±Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞ (QNH)")
    
    return "\n".join(decoded)

def decode_taf(taf):
    if taf == 'N/A':
        return "–î–∞–Ω–Ω—ã–µ TAF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    decoded = ["üïí –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑:"]
    current_block = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º TAF –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
    parts = re.split(r'(TEMPO|BECMG|FM\d{6}|PROB\d{2})', taf)
    period_type = "MAIN"
    
    for part in parts:
        if part in ['TEMPO', 'BECMG'] or part.startswith(('FM', 'PROB')):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫
            if current_block:
                decoded.append("\n".join(current_block))
                current_block = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
            if part == 'TEMPO':
                period_type = "TEMPO"
                current_block.append("‚è≥ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (TEMPO):")
            elif part == 'BECMG':
                period_type = "BECMG"
                current_block.append("üîÑ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (BECMG):")
            elif part.startswith('FM'):
                period_type = "FM"
                time_str = f"{part[2:4]}:{part[4:6]} UTC {part[6]} —á–∏—Å–ª–∞"
                current_block.append(f"‚åõ –° {time_str}:")
            elif part.startswith('PROB'):
                period_type = "PROB"
                prob = part[4:6]
                current_block.append(f"‚ùî –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {prob}%:")
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
            metar_lines = decode_metar(part).split('\n')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
            cloud_info = []
            for line in metar_lines:
                if line.startswith('‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å:'):
                    cloud_info.append(line)
                elif '–Ω–∞' in line and ('–º–µ—Ç—Ä–∞—Ö' in line or '—Ñ—É—Ç–∞—Ö' in line):
                    cloud_info.append(line)
            
            if cloud_info:
                current_block.append("\n".join(cloud_info))
            
            for line in metar_lines:
                if line.startswith(('üïí', 'üå¨Ô∏è', 'üëÄ', 'üå°Ô∏è', '‚è±Ô∏è')):
                    if period_type in ["TEMPO", "BECMG", "FM", "PROB"]:
                        current_block.append(f"   {line}")
                    else:
                        current_block.append(line)
    
    if current_block:
        decoded.append("\n".join(current_block))
    
    # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Streamlit
    final_output = []
    for line in decoded:
        if line.startswith(('‚è≥', 'üîÑ', '‚åõ', '‚ùî')):
            final_output.append("\n" + line)
        else:
            final_output.append(line)
    
    return "\n".join(final_output)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
name_icao_df = load_airport_data()
if name_icao_df is None:
    st.stop()

def get_airport_info(icao_code):
    result = name_icao_df.filter(pl.col("icao_code") == icao_code)
    
    if result.is_empty():
        return None
    
    row = result.row(0, named=True)
    
    return {
        "–ù–∞–∑–≤–∞–Ω–∏–µ": row["name_rus"] if row["name_rus"] else row["name_eng"],
        "–ì–æ—Ä–æ–¥": row["city_rus"] if row["city_rus"] else row["city_eng"],
        "–°—Ç—Ä–∞–Ω–∞": row["country_rus"],
        "–ò–ö–ê–û": icao_code
    }

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
mode = st.sidebar.radio("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", ["–û–¥–∏–Ω –∞—ç—Ä–æ–ø–æ—Ä—Ç", "–ù–µ—Å–∫–æ–ª—å–∫–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤"])

if mode == "–û–¥–∏–Ω –∞—ç—Ä–æ–ø–æ—Ä—Ç":
    icao_code = st.sidebar.text_input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ò–ö–ê–û –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ (4 –±—É–∫–≤—ã):', 'UUEE').strip().upper()
    
    if icao_code:
        if len(icao_code) != 4 or not icao_code.isalpha():
            st.error("–ö–æ–¥ –ò–ö–ê–û –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 –±—É–∫–≤")
        else:
            airport_info = get_airport_info(icao_code)
            
            if airport_info:
                st.markdown(f"<div class='airport-card'>", unsafe_allow_html=True)
                st.subheader(f"{airport_info['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({airport_info['–ò–ö–ê–û']})")
                st.write(f"üìç **–ì–æ—Ä–æ–¥:** {airport_info['–ì–æ—Ä–æ–¥']}")
                st.write(f"üåç **–°—Ç—Ä–∞–Ω–∞:** {airport_info['–°—Ç—Ä–∞–Ω–∞']}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ
                with st.spinner('–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ...'):
                    metar, taf = get_metar_taf(icao_code)
                    
                    # METAR
                    st.markdown("**METAR (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞):**")
                    if metar != 'N/A':
                        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª METAR"):
                            st.code(metar, language="text")
                        st.markdown("**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**")
                        st.write(decode_metar(metar))
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ METAR –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    
                    # TAF
                    st.markdown("**TAF (–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã):**")
                    if taf != 'N/A':
                        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª TAF"):
                            st.code(taf, language="text")
                        st.markdown("**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**")
                        st.write(decode_taf(taf))
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ TAF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                st.markdown("</div>", unsafe_allow_html=True)
            else:
                st.warning(f"–ê—ç—Ä–æ–ø–æ—Ä—Ç —Å –∫–æ–¥–æ–º {icao_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

else:  # –ù–µ—Å–∫–æ–ª—å–∫–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
    icao_codes_input = st.sidebar.text_area(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –ò–ö–ê–û –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª):',
        'UUEE\nUUDD\nULLI'
    ).strip().upper()
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    icao_list = []
    for line in icao_codes_input.split('\n'):
        for part in re.split(r'[,;\s]+', line):
            if len(part) == 4 and part.isalpha():
                icao_list.append(part)
    
    if icao_list:
        st.sidebar.success(f"–ù–∞–π–¥–µ–Ω–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {len(icao_list)}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if len(icao_list) > 10:
            st.warning("–í—ã–±—Ä–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10.")
            icao_list = icao_list[:10]
        
        progress_bar = st.progress(0)
        total_airports = len(icao_list)
        
        for i, icao_code in enumerate(icao_list):
            progress_bar.progress((i + 1) / total_airports)
            
            airport_info = get_airport_info(icao_code)
            
            if airport_info:
                st.markdown(f"<div class='airport-card'>", unsafe_allow_html=True)
                st.subheader(f"{airport_info['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({airport_info['–ò–ö–ê–û']})")
                st.write(f"üìç **–ì–æ—Ä–æ–¥:** {airport_info['–ì–æ—Ä–æ–¥']}")
                st.write(f"üåç **–°—Ç—Ä–∞–Ω–∞:** {airport_info['–°—Ç—Ä–∞–Ω–∞']}")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ
                metar, taf = get_metar_taf(icao_code)
                
                # METAR
                with st.expander(f"METAR –¥–ª—è {icao_code}"):
                    if metar != 'N/A':
                        st.code(metar, language="text")
                        st.markdown("**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**")
                        st.write(decode_metar(metar))
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ METAR –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                # TAF
                with st.expander(f"TAF –¥–ª—è {icao_code}"):
                    if taf != 'N/A':
                        st.code(taf, language="text")
                        st.markdown("**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**")
                        st.write(decode_taf(taf))
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ TAF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                st.markdown("</div>", unsafe_allow_html=True)
            else:
                st.warning(f"–ê—ç—Ä–æ–ø–æ—Ä—Ç —Å –∫–æ–¥–æ–º {icao_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.caption(f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å–µ—Ä–≤–∏—Å–æ–º metartaf.ru | –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")